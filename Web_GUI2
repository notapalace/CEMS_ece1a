import tkinter as tk
from tkinter import ttk

def create_rounded_rectangle(canvas, x1, y1, x2, y2, radius, **kwargs):
    points = [x1+radius, y1,
              x2-radius, y1,
              x2, y1,
              x2, y1+radius,
              x2, y2-radius,
              x2, y2,
              x2-radius, y2,
              x1+radius, y2,
              x1, y2,
              x1, y2-radius,
              x1, y1+radius,
              x1, y1]
    return canvas.create_polygon(points, **kwargs, smooth=True)

class WelcomePage(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent, bg="#FFFFFF")
        self.controller = controller
        self.configure(padx=50, pady=50)
        self.grid_columnconfigure(0, weight=1)
        self.grid_rowconfigure(2, weight=0)

        welcome_label = tk.Label(self, text="Welcome to", font=("Google Sans", 12), bg="white", justify="center")
        welcome_label.grid(row=3, column=0, sticky="n")

        cems_label = tk.Label(self, text="CEMS", font=("Google Sans", 60, "bold"), bg="white", justify="center")
        cems_label.grid(row=4, column=0, sticky="n")

        description_label = tk.Label(self, text="Campus Event Management System", font=("Google Sans", 14), bg="white", justify="center")
        description_label.grid(row=5, column=0, sticky="n")

        about_label = tk.Label(self, text="About CEMS", font=("Google Sans", 12), bg="white", fg="gray")
        about_label.grid(row=1, column=0, sticky="w")

        events_label = tk.Label(self, text="Upcoming Events", font=("Google Sans", 12), bg="white", fg="gray")
        events_label.grid(row=1, column=0, sticky="e")

        username_label = tk.Label(self, text="\n \n \n Username", font=("Google Sans", 12), bg="white", justify="center")
        username_label.grid(row=10, column=0, sticky="n")

        username_entry = ttk.Entry(self, width=30)
        username_entry.grid(row=11, column=0, sticky="n")

        password_label = tk.Label(self, text="\n Password", font=("Google Sans", 12), bg="white", justify="center")
        password_label.grid(row=12, column=0, sticky="n")

        password_entry = ttk.Entry(self, show="*", width=30)
        password_entry.grid(row=13, column=0, sticky="s")

        login_button = tk.Button(self, text="Let's go!", bg="black", fg="white", width=15, command=lambda: self.controller.show_frame("EventSetUp"))
        login_button.grid(row=15, column=0, sticky="s")

class EventSetUp(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent, bg="#FFFFFF")
        self.controller = controller
        self.configure(padx=50, pady=50)
        self.grid_columnconfigure(0, weight=1)
        self.grid_rowconfigure(2, weight=0)
        
        CEMS_label = tk.Label(self, text="CEMS - Campus Event Management System", font=("Google Sans", 12), bg="white", fg="grey")
        CEMS_label.grid(row=1, column=0, sticky="w")

        logout_button = tk.Button(self, text="Log Out", bg="black", fg="white", width=15, command=lambda: self.controller.show_frame("WelcomePage"))
        logout_button.grid(row=1, column=0, sticky="e")

        setup_label = tk.Label(self, text="\nTime to Set Up!", font=("Google Sans", 24, "bold"), bg="white")
        setup_label.grid(row=4, column=0, sticky="nw")

        modality_label = tk.Label(self, text="\n 1. Select Modality", font=("Google Sans", 12), bg="white")
        modality_label.grid(row=6, column=0, sticky="w")

        selected_option = tk.StringVar()
        dropdown = tk.OptionMenu(self, selected_option, "Online", "On Site", "Hybrid")
        dropdown.grid(row=7, column=0, sticky="w")
        
        event_label = tk.Label(self, text="\n 2. About the Event", font=("Google Sans", 12), bg="white")
        event_label.grid(row=9, column=0, sticky="w")

        eventname_label = tk.Label(self, text="\n Event Name:", font=("Google Sans", 12), bg="white")
        eventname_label.grid(row=10, column=0, sticky="w")

        self.event_name_var = tk.StringVar()
        eventname_entry = ttk.Entry(self, width=50, textvariable=self.event_name_var)
        eventname_entry.grid(row=11, column=0, sticky="w")

        eventdetails_label = tk.Label(self, text= "\n Event Details:", font=("Google Sans", 12), bg="white")
        eventdetails_label.grid(row=12, column=0, sticky="w")
        
        text3 = tk.Text(self, height=5, width=50)
        text3.grid(row=13, column=0, sticky="w")
        text3.insert(tk.END, "You can type here!")
        
        time1_label = tk.Label(self, text="\nTime Start:", font=("Google Sans", 12), bg="white")
        time1_label.grid(row=14, column=0, sticky="w")
        
        timestart_entry = ttk.Entry(self, width=30)
        timestart_entry.grid(row=15, column=0, sticky="w")
        
        time2_label = tk.Label(self, text="\nTime End:", font=("Google Sans", 12), bg="white", justify="left")
        time2_label.grid(row=14, column=0, sticky="n")
        
        timeend_entry = ttk.Entry(self, width=30)
        timeend_entry.grid(row=15, column=0, sticky="n")
        
        mandatory_label = tk.Label(self, text="\nIs this mandatory?", font=("Google Sans", 12), bg="white")
        mandatory_label.grid(row=16, column=0, sticky="w")
        
        selected_option = tk.StringVar()
        mandatory = tk.OptionMenu(self, selected_option, "Yes", "No")
        mandatory.grid(row=17, column=0, sticky="w")
        
        evaluation_label = tk.Label(self, text="\nEvaluation Form:", font=("Google Sans", 12), bg="white")
        evaluation_label.grid(row=18, column=0, sticky="w")
        
        evaluation_entry = ttk.Entry(self, width=30)
        evaluation_entry.grid(row=19, column=0, sticky="w")
        
        submit_button = tk.Button(self, text="Submit", bg="black", fg="white", width=15, command=lambda: self.controller.show_frame("Homepage"))
        submit_button.grid(row=20, column=0, sticky="w")
        
class Homepage(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent, bg="#FFFFFF")
        self.configure(padx=50, pady=50)
        self.controller = controller
        self.grid_columnconfigure(0, weight=1)
        self.grid_rowconfigure(2, weight=0)

        CEMS_label = tk.Label(self, text="CEMS - Campus Event Management System", font=("Google Sans", 12), bg="white", fg="grey")
        CEMS_label.grid(row=1, column=0, sticky="w")

        logout_button = tk.Button(self, text="Log Out", bg="black", fg="white", width=15, command=lambda: self.controller.show_frame("WelcomePage"))
        logout_button.grid(row=1, column=0, sticky="e")
        
        congrats_label = tk.Label(self, text="\nCongratulations!", font=("Google Sans", 28, "bold"), bg="white")
        congrats_label.grid(row=3, column=0, sticky="nw")
        
        congrats1_label = tk.Label(self, text="Event set up successfully with modality!", font=("Google Sans", 18, "bold"), bg="white")
        congrats1_label.grid(row=4, column=0, sticky="nw")
        
        congrats2_label = tk.Label(self, text="\nAll Events:", font=("Google Sans", 16, "bold"), bg="white")
        congrats2_label.grid(row=5, column=0, sticky="nw")
        
        self.event_name_label = tk.Label(self, text="", font=("Google Sans", 12), bg="white")
        self.event_name_label.grid(row=6, column=0, sticky="nw")
        
        edit_button = tk.Button(self, text="Edit", bg="black", fg="white", width=15, command=lambda: self.controller.show_frame("EventSetUp"))
        edit_button.grid(row=6, column=0, sticky="e")
        
        check_button = tk.Button(self, text="Check Attendance", bg="black", fg="white", width=15, command=lambda: self.controller.show_frame("CheckAttendance"))
        check_button.grid(row=6, column=0, sticky="n")
        
    def update_labels(self, event_name):
        self.event_name_label.config(text=event_name)

class CheckAttendance(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent, bg="#FFFFFF")
        self.configure(padx=50, pady=50)
        self.controller = controller
        self.grid_columnconfigure(0, weight=1)
        self.grid_rowconfigure(2, weight=0)
        
        self.row_count = 6
        
        CEMS_label = tk.Label(self, text="CEMS - Campus Event Management System", font=("Google Sans", 12), bg="white", fg="grey")
        CEMS_label.grid(row=1, column=0, sticky="w")
        
        attendance_label = tk.Label(self, text="\nAttendance", font=("Google Sans", 28, "bold"), bg="white")
        attendance_label.grid(row=3, column=0, sticky="nw")
        
        return_button = tk.Button(self, text="Return", bg="black", fg="white", width=15, command=lambda: self.controller.show_frame("Homepage"))
        return_button.grid(row=1, column=0, sticky="e")
        
        attendance1_label = tk.Label(self, text="\nName", font=("Google Sans", 12), bg="white")
        attendance1_label.grid(row=4, column=0, sticky="w")
        
        attendance2_label = tk.Label(self, text="\nStatus", font=("Google Sans", 12), bg="white")
        attendance2_label.grid(row=4, column=0, sticky="n")
        
        attendance3_label = tk.Label(self, text="\nGive a Badge", font=("Google Sans", 12), bg="white")
        attendance3_label.grid(row=4, column=0, sticky="e")
        
        attendance4_label = tk.Label(self, text="\n", font=("Google Sans", 12), bg="white")
        attendance4_label.grid(row=5, column=0, sticky="w")
        
        attendance5_label = tk.Label(self, text="\n", font=("Google Sans", 12), bg="white")
        attendance5_label.grid(row=5, column=0, sticky="n")
        
        attendance6_label = tk.Label(self, text="\n", font=("Google Sans", 12), bg="white")
        attendance6_label.grid(row=5, column=0, sticky="e")
        
        self.add_button = tk.Button(self, text="Add", bg="black", fg="white", width=15, command=self.add_entry)
        self.add_button.grid(row=3, column=0, sticky="e")

    def add_entry(self):
        name1_entry = ttk.Entry(self, width=30)
        name1_entry.grid(row=self.row_count, column=0, sticky="w")

        selected_option = tk.StringVar()
        status = tk.OptionMenu(self, selected_option, "Evaluated", "Not Evaluated")
        status.grid(row=self.row_count, column=0, sticky="n")

        remarks_button = tk.Button(self, text="Give a Badge", bg="black", fg="white", width=15)
        remarks_button.grid(row=self.row_count, column=0, sticky="e")

        self.row_count += 1
        
class App(tk.Tk):
    def __init__(self, *args, **kwargs):
        tk.Tk.__init__(self, *args, **kwargs)
        self.title("CEMS - Organizer Page")
        self.geometry("1024x768")
        self.configure(bg="#263238")

        container = tk.Frame(self)
        container.pack(side="top", fill="both", expand=True)
        container.grid_rowconfigure(0, weight=1)
        container.grid_columnconfigure(0, weight=1)

        self.frames = {}
        for F in (WelcomePage, EventSetUp, Homepage, CheckAttendance):
            page_name = F.__name__
            frame = F(parent=container, controller=self)
            self.frames[page_name] = frame
            frame.grid(row=0, column=0, sticky="nsew")

        self.show_frame("WelcomePage")

    def show_frame(self, page_name):
        frame = self.frames[page_name]
        if page_name == "Homepage":
            event_name = self.frames["EventSetUp"].event_name_var.get()
            frame.update_labels(event_name)
        frame.tkraise()

if __name__ == "__main__":
    app = App()
    app.mainloop()
